# -*- coding: utf-8 -*-
"""Assignment1_A*_algo

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ro3MlOdZQidb_uiclsGhkgJnJ55tSak_
"""

graph = {}
heu_val = {}

input_file = open("/content/input.txt", "r")


def create_graph_and_heuristic(input_file):
        for i in input_file:
            division = i.strip().split()
            if len(division) < 2:
                pass

            city, heu_val[city] = division[0], int(division[1])


            adj_node = []
            for i in range(2, len(division), 2):
                adj_node.append((division[i], int(division[i + 1])))

            if adj_node:
              graph[city] = adj_node
            else:
              graph[city] = None

create_graph_and_heuristic(input_file)


def branch_node(parent):
    return graph.get(parent, None)

def shortest_path_using_Astar(startplace, destination):
    explored_list = []
    explored_list.append(startplace)
    visited_list = []
    shortest_dist = {startplace: 0}#Dictionary to store the shortest distance from start to node
    parents_list = {startplace: startplace}#node and tar parent stored


    while explored_list != []:

        cur = None

        #f(n) = g(n) + h(n) -->calcuting cost to find lowest cost among all nodes stored in explored list
        for node in explored_list:#comparing f(cur) with f(node in explored list)
            if cur == None or heu_val[cur] + shortest_dist[cur] > heu_val[node] + shortest_dist[node]:
                cur = node
        #cant find any valid paths
        #when f(cur) < f(node) for all nodes in explored list
        if cur == None:
            print("NO PATH FOUND")


        if cur == destination:#If cur is goal --. trace back the path
            path_list = []

            while parents_list[cur] != cur:#val != key
                path_list.append(cur)
                cur = parents_list[cur]
            path_list.append(startplace)
            path_list.reverse()
            total_dist = 0
            for i in range(len(path_list) - 1):
                adj_nodes = branch_node(path_list[i])
                for adj_node, dist in adj_nodes:
                    if adj_node == path_list[i + 1]:
                        total_dist += dist

            print("Path:", end=" ")
            for i in range(len(path_list)-1):
              if path_list[i] == "RimnicuVilcea":
                  print("Rimnicu" + "->", end=" ")
              else:
                  print(path_list[i] + "->", end=" ")
            print(path_list[-1])
            print("Total distance: "+ str(total_dist) + " km")

            return path_list

        explored_list.remove(cur)
        visited_list.append(cur)# to prevent stucking in an infifnite loop

        #updating dis for nodes
        adj_neigh = branch_node(cur)#finds the node connected to cur
        if adj_neigh != None:#if cur has neighbor, continue to update dist
            for (adjnode, cost) in adj_neigh:
                if adjnode not in explored_list and adjnode not in visited_list:
                    explored_list.append(adjnode)
                    parents_list[adjnode] = cur
                    shortest_dist[adjnode] = shortest_dist[cur] + cost#cost = dist of cur to adjnode
                else:
                    if shortest_dist[adjnode] > cost + shortest_dist[cur] :
                        shortest_dist[adjnode] = cost + shortest_dist[cur]
                        parents_list[adjnode] = cur
                        #adjnode was already explored, however, we found a better sol
                        #thus stored it in explore list, to traverse it again
                        if adjnode in visited_list:
                            visited_list.remove(adjnode)
                            explored_list.append(adjnode)

    print("NO PATH FOUND")

startnode = input("Enter the name of place from where you want to start:")#'Arad'
destination = input("Enter the name of place where you want to end your travel:")#'Bucharest'

shortest_path_using_Astar(startnode, destination)

input_file.close()